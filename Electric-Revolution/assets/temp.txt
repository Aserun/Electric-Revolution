
		switch (_type)
		{
		case 0:
			nodes.emplace_back(Vec2(0.0, 24.0), this);
			nodes.emplace_back(Vec2(64.0, 24.0), this);
			break;
		case 1:
			nodes.emplace_back(Vec2(32.0, 0.0), this);
			nodes.emplace_back(Vec2(32.0, 48.0), this);
			nodes.emplace_back(Vec2(0.0, 24.0), this);
			nodes.emplace_back(Vec2(64.0, 24.0), this);
			break;
		case 2:
			nodes.emplace_back(Vec2(0.0, 24.0), this);
			nodes.emplace_back(Vec2(32.0, 48.0), this);
			nodes.emplace_back(Vec2(64.0, 24.0), this);
			break;
		case 3:
			nodes.emplace_back(Vec2(0.0, 24.0), this, NodeState::Hi, true);
			nodes.emplace_back(Vec2(64.0, 24.0), this, NodeState::Low, true);
			break;
		case 4:
			nodes.emplace_back(Vec2(17.0, 48.0), this);
			nodes.emplace_back(Vec2(27.0, 48.0), this);
			nodes.emplace_back(Vec2(37.0, 48.0), this);
			nodes.emplace_back(Vec2(47.0, 48.0), this);
			break;
		case 5:
			nodes.emplace_back(Vec2(0.0, 24.0), this);
			nodes.emplace_back(Vec2(64.0, 24.0), this);
			nodes.emplace_back(Vec2(32.0, 24.0), this, NodeState::Low, true);
			break;
		default:
			break;
		}
		/*
		String path;
		switch (type)
		{
		case 0:
			path = L"machine1/";
			assets->texture(L"machine1/image.png")->draw(region.pos);
			break;
		case 1:
			path = L"machine2/";
			assets->texture(L"machine2/image.png")->draw(region.pos);
			break;
		case 2:
			path = L"machine3/";
			assets->texture(L"machine3/image.png")->draw(region.pos);
			break;
		case 3:
			path = L"machine4/";
			assets->texture(L"machine4/image.png")->draw(region.pos);
			break;
		case 4:
		{
			int number = 0;
			int result = 0;

			path = L"machine5/";
			assets->texture(L"machine5/image.png")->draw(region.pos);
			for (int i = 0; i < 4; i++) number += nodes[i].state == NodeState::Hi ? (1 << i) : 0;
			switch (number)
			{
			case 0x0:	result = 0b00111111;	break;
			case 0x1:	result = 0b00000110;	break;
			case 0x2:	result = 0b01011011;	break;
			case 0x3:	result = 0b01001111;	break;
			case 0x4:	result = 0b01100110;	break;
			case 0x5:	result = 0b01101101;	break;
			case 0x6:	result = 0b01111101;	break;
			case 0x7:	result = 0b00100111;	break;
			case 0x8:	result = 0b01111111;	break;
			case 0x9:	result = 0b01101111;	break;
			case 0xA:	result = 0b01110111;	break;
			case 0xB:	result = 0b01111100;	break;
			case 0xC:	result = 0b01011000;	break;
			case 0xD:	result = 0b01011110;	break;
			case 0xE:	result = 0b01111001;	break;
			case 0xF:	result = 0b01110001;	break;
			}
			if (result & (1 << 0)) assets->texture(L"machine5/led-a.png")->draw(region.pos);
			if (result & (1 << 1)) assets->texture(L"machine5/led-b.png")->draw(region.pos);
			if (result & (1 << 2)) assets->texture(L"machine5/led-c.png")->draw(region.pos);
			if (result & (1 << 3)) assets->texture(L"machine5/led-d.png")->draw(region.pos);
			if (result & (1 << 4)) assets->texture(L"machine5/led-e.png")->draw(region.pos);
			if (result & (1 << 5)) assets->texture(L"machine5/led-f.png")->draw(region.pos);
			if (result & (1 << 6)) assets->texture(L"machine5/led-g.png")->draw(region.pos);
		}
		break;
		case 5:
			path = L"machine6/";
			assets->texture(L"machine6/image.png")->draw(region.pos);
			break;
		default:
			break;
		}
		for (int i = 0; i < int(nodes.size()); i++)
		{
			Texture* tex = nullptr;
			switch (nodes[i].state)
			{
			case NodeState::Hi:
				tex = assets->texture(path + L"node" + Format(i) + L"-hi.png");
				break;
			case NodeState::Low:
				tex = assets->texture(path + L"node" + Format(i) + L"-low.png");
				break;
			}
			if (tex != nullptr) tex->draw(region.pos);
		}

		for (auto& n : nodes) n.draw();

		if (selectedMachine == this) region.draw(Color(Palette::Orange, 128));
		*/

/*
		switch (type)
		{
		case 5:
			if (region.leftClicked())
			{
				if (nodes[2].state == NodeState::Hi) nodes[2].state = NodeState::Low;
				else nodes[2].state = NodeState::Hi;
			}
			break;
		}
		*/

/*
		bool flag = false;
		switch (type)
		{
		case 0:
			if (nodes[0].state == NodeState::Hi)
			{
				if (nodes[1].state != nodes[0].state) flag = true;
				nodes[1].state = nodes[0].state;
			}
			break;
		case 1:
			if (nodes[0].state != NodeState::None)
			{
				if (nodes[1].state != nodes[0].state) flag = true;
				if (nodes[2].state != nodes[0].state) flag = true;
				if (nodes[3].state != nodes[0].state) flag = true;
				nodes[1].state = nodes[0].state;
				nodes[2].state = nodes[0].state;
				nodes[3].state = nodes[0].state;
			}
			if (nodes[1].state != NodeState::None)
			{
				if (nodes[0].state != nodes[1].state) flag = true;
				if (nodes[2].state != nodes[1].state) flag = true;
				if (nodes[3].state != nodes[1].state) flag = true;
				nodes[0].state = nodes[1].state;
				nodes[2].state = nodes[1].state;
				nodes[3].state = nodes[1].state;
			}
			if (nodes[2].state != NodeState::None)
			{
				if (nodes[0].state != nodes[2].state) flag = true;
				if (nodes[1].state != nodes[2].state) flag = true;
				if (nodes[3].state != nodes[2].state) flag = true;
				nodes[0].state = nodes[2].state;
				nodes[1].state = nodes[2].state;
				nodes[3].state = nodes[2].state;
			}
			if (nodes[3].state != NodeState::None)
			{
				if (nodes[0].state != nodes[3].state) flag = true;
				if (nodes[1].state != nodes[3].state) flag = true;
				if (nodes[2].state != nodes[3].state) flag = true;
				nodes[0].state = nodes[3].state;
				nodes[1].state = nodes[3].state;
				nodes[2].state = nodes[3].state;
			}
			break;
		case 2:
			if (nodes[1].state == NodeState::Hi)
			{
				if (nodes[0].state != NodeState::None)
				{
					if (nodes[2].state != nodes[0].state) flag = true;
					nodes[2].state = nodes[0].state;

				}
				if (nodes[2].state != NodeState::None)
				{
					if (nodes[0].state != nodes[2].state) flag = true;
					nodes[0].state = nodes[2].state;
				}
			}
			break;
		case 5:
			if (nodes[2].state == NodeState::Hi)
			{
				if (nodes[0].state != NodeState::None)
				{
					if (nodes[1].state != nodes[0].state) flag = true;
					nodes[1].state = nodes[0].state;

				}
				if (nodes[1].state != NodeState::None)
				{
					if (nodes[0].state != nodes[1].state) flag = true;
					nodes[0].state = nodes[1].state;
				}
			}
			break;
		}
		return flag;
	*/